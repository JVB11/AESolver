"""Python run file that tests the numerical differentiation python package within the project, based on a specific polytrope model.

Author: Jordan Van Beeck <jordanvanbeeck@hotmail.com>
"""
#
#       NUMERICAL DERIVATIVES TEST CASE: PLOTTING OUTPUT
#
# imports for the numerical differentiation test case
import sys
import matplotlib.pyplot as plt
import pandas as pd  # type: ignore
from num_deriv import NumericalDifferentiator as Nd  # type: ignore
from pathlib import Path
from path_resolver import resolve_path_to_file

# typing imports
from pandas import DataFrame as pd_DataFrame


def get_polytrope_data_path(sys_args: list) -> Path:
    """Retrieves the path to the txt file storing polytrope data used for the test plotting actions.

    Parameters
    ----------
    sys_args : list
        Contains the passed command line arguments when executing this file.

    Returns
    -------
    Path
        The pathlib Path object that refers to the file containing data on the polytrope mass profile.
    """
    # create the string that stores the path to the directory of the file relative to this file's directory
    relative_dir_path_string = 'data/models/'
    # store the file name
    file_name = 'polytrope.txt'
    # resolve the path to the file
    return resolve_path_to_file(
        file_name=file_name,
        default_path=relative_dir_path_string,
        sys_arguments=sys_args,
        default_run_path='../..',
    )


def load_polytrope_data(polytrope_path: Path) -> pd_DataFrame:
    """Loads the polytrope test data, which are used to generate the test plot figures.

    Parameters
    ----------
    polytrope_path : Path
        Resolved path to the file containing the polytrope data.

    Returns
    -------
    pd_DataFrame
        Contains the necessary data to generate the test plot figures.
    """
    return pd.read_fwf(
        polytrope_path,
        delimiter='',
        header=None,
        names=['scaled_radius', 'density_parameter', 'derivate_density'],
    )


def test_derivative_functions(polytrope_data: pd_DataFrame) -> None:
    """Generate the derivatives using the numerical derivation method implemented in this module.

    Parameters
    ----------
    polytrope_data : pd_DataFrame
        Contains the necessary information for the plotting test.
    """
    # test the Fornberg, unispline and stencil functions
    _diff_object = Nd(
        order_derivative=1,
        differentiation_method='fornberg',
    )
    fb_der = _diff_object.differentiate(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        polytrope_data.loc[:, 'density_parameter'].to_numpy(),
        interpolation_order=8,
    )
    _diff_object = Nd(order_derivative=1)
    unispline = _diff_object.differentiate(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        polytrope_data.loc[:, 'density_parameter'].to_numpy(),
    )
    return fb_der, unispline, None


def create_plots_and_show(
    fb_der, unispline, stencils, polytrope_data: pd_DataFrame
) -> None:
    """Creates the test plots and shows them.

    Parameters
    ----------
    fb_der : Any
        Contains the numerical derivatives generated by the Fornberg method.
    unispline : Any
        Contains the numerical derivatives generated by the unispline method.
    stencils : Any
        Contains the numerical derivatives generated by forward differencing using Numba stencils (TODO: broken for now, fix it!)
    polytrope_data : pd_DataFrame
        Contains the necessary plot data from the loaded file; for the plotting test.
    """
    # plot the output of the tests
    _fig, _ax = plt.subplots()
    _ax.plot(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        polytrope_data.loc[:, 'density_parameter'].to_numpy(),
        c='k',
        label='Density parameter',
    )
    _ax.plot(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        polytrope_data.loc[:, 'derivate_density'].to_numpy(),
        c='r',
        label='First derivative (Mad star)',
    )
    _ax.plot(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        fb_der[0][1],
        c='b',
        label='Fornberg derivative',
    )
    _ax.plot(
        polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
        unispline[0][1],
        c='orange',
        label='Unispline derivative',
    )
    if stencils is not None:
        _ax.plot(
            polytrope_data.loc[:, 'scaled_radius'].to_numpy(),
            stencils[0][1],
            c='purple',
            label='Numba stencil derivative',
        )
    _ax.set_xlabel('Scaled radius', fontsize=12)
    _ax.set_ylabel('Density parameter', fontsize=12)
    _ax.set_title(
        'Example polytropic star (n=3; Mad Star online repo)',
        pad=15,
        fontsize=13,
    )
    _ax.minorticks_on()
    _ax.tick_params(
        which='both', right=True, top=True, labelright=True, labeltop=True
    )
    _ax.legend(frameon=False, fontsize=11)
    _fig.tight_layout()
    plt.show()


if __name__ == '__main__':
    # generate the path to the polytrope file!
    my_polytrope_data_path = get_polytrope_data_path(sys_args=sys.argv)
    # use that path to load the necessary data
    polytrope_data = load_polytrope_data(polytrope_path=my_polytrope_data_path)
    # get the derivative functions
    fb_der, unispline, stencils = test_derivative_functions(
        polytrope_data=polytrope_data
    )
    # generate the plots of the derivatives and display them
    create_plots_and_show(
        fb_der, unispline, stencils, polytrope_data=polytrope_data
    )
